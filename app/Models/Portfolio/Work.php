<?php

namespace App\Models\Portfolio;

use Illuminate\Database\Eloquent\Model;
use App\Models\Url;
use Carbon\Carbon;


class Work extends Model
{
    protected $table = 'portfolio_works';
    protected $dates = ['site_created'];

    protected static function boot()
    {
        parent::boot();

        static::saved(function (self $model) {
            if ($model->isDirty('slug', 'category_id')) {
                $model->generatePath();
            }
        });

    }

    public function url()
    {
        return $this->morphOne(Url::class, 'model', 'model_type', 'model_id')->withDefault(['path'=>404]);
    }

    public function getUrl()
    {
        return route('portfolio', ['path' => $this->url->path]);
    }

    public function getLink() {
        return url($this->getUrl());
    }

    public function category()
    {
        return $this->belongsTo(Category::class, 'category_id')->withDefault(['slug'=>'']);
    }

    public function generatePath()
    {
        $slug = $this->slug;

        $path = $this->category->url->path . '/' . $slug;

        if ($this->url()->exists()) {
            $_path = Url::find($this->url->id);
            if ($_path->exists()) {
                $_path->path = $path;
                $_path->save();
            }
        } else {
            $_path = Url::create(['path' => $path]);
            $_path->model()->associate($this)->save();
        }
    }


    public function scopeActive($query)
    {
        return $query->where('active', 1);
    }

    public function getTitle()
    {
        return $this->name;
    }

    public function getSeoTitle()
    {
        return isset($this->seo_title) ? $this->seo_title : $this->getTitle();
    }

    public function delete()
    {
        $this->url()->delete();

        return parent::delete(); // TODO: Change the autogenerated stub
    }

    public function getSiteCreatedAttribute($value) {
        return Carbon::parse($value)->format('d-m-Y');
    }

    public function getImage() {
        return '/storage/'.str_replace("\\", "/", $this->image);
    }
}
